name: fake-service

on:
  push:
    branches: [ main, solution ]

jobs:

  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run Hadolint against Dockerfile
      uses: hadolint/hadolint-action@v1.5.0
      with:
        dockerfile: Dockerfile
        failure-threshold: error

  build:
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and Export Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: policy-as-code:latest
          outputs: type=docker,dest=/tmp/policy-as-code.tar
          push: false
      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v2
        with:
          name: policy-as-code
          path: /tmp/policy-as-code.tar

  dynamic-analysis:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v2
        with:
          name: policy-as-code
          path: /tmp
      - name: Load Docker Image
        run: |
          docker load --input /tmp/policy-as-code.tar
          docker image ls -a
      - name: Install Inspec
        uses: actionshub/chef-install@1.1.0
        with:
          channel: current
          project: inspec
      - name: Accept Chef License
        run: inspec --chef-license=accept
      - name: Run Docker
        id: run
        run: echo "::set-output name=container::$(docker run -d policy-as-code:latest)"
      - name: Run Integration Tests
        run: echo "Add Inspec integration tests here"
      - name: Run CIS Benchmark for Docker
        run: echo "Add Inspec Docker CIS benchmarks here"
      - name: Clean up container
        if: ${{ always() }}
        run: docker rm -f ${{steps.run.outputs.container}}
